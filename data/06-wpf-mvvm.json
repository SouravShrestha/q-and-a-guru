{
  "topic": "WPF & MVVM",
  "questions": [
    {
      "id": 1,
      "question": "What is WPF?",
      "answer": "WPF (Windows Presentation Foundation) is a UI framework by Microsoft for building Windows desktop apps with rich graphics, styling, data binding, and more.",
      "example": "// XAML-based UI\n<Window>\n    <StackPanel>\n        <TextBox />\n        <Button Content=\"Click Me\" />\n    </StackPanel>\n</Window>"
    },
    {
      "id": 2,
      "question": "What is MVVM?",
      "answer": "MVVM (Model-View-ViewModel) is a design pattern that separates UI (View), logic (ViewModel), and data (Model). It promotes testability and separation of concerns.",
      "example": "// ViewModel has logic & binding\npublic class MainViewModel : INotifyPropertyChanged { public string Name { get; set; } }"
    },
    {
      "id": 3,
      "question": "What is Data Binding in WPF?",
      "answer": "Data binding connects UI elements to data sources, letting changes flow between them automatically.",
      "example": "// Bind TextBox to ViewModel\n<TextBox Text=\"{Binding Name, Mode=TwoWay}\" />"
    },
    {
      "id": 4,
      "question": "How does INotifyPropertyChanged work?",
      "answer": "It notifies the UI when a property value changes so bindings can update.",
      "example": "public class VM : INotifyPropertyChanged {\n    private string _name;\n    public string Name {\n        get => _name;\n        set { _name = value; OnPropertyChanged(); }\n    }\n}"
    },
    {
      "id": 5,
      "question": "What is a DependencyProperty?",
      "answer": "A special WPF property that supports styling, animation, and data binding.",
      "example": "public static readonly DependencyProperty MyProperty = DependencyProperty.Register(\"My\", typeof(string), typeof(MyControl));"
    },
    {
      "id": 6,
      "question": "What is a RelayCommand?",
      "answer": "RelayCommand is a reusable command implementation that delegates Execute and CanExecute logic.",
      "example": "public ICommand SaveCommand => new RelayCommand(Save, CanSave);"
    },
    {
      "id": 7,
      "question": "How do you bind a Command to a Button?",
      "answer": "Use the `Command` property in XAML to bind to a command in your ViewModel.",
      "example": "<Button Command=\"{Binding SaveCommand}\" Content=\"Save\" />"
    },
    {
      "id": 8,
      "question": "What is a ViewModel?",
      "answer": "It’s the middle layer between View and Model that contains presentation logic and data binding properties.",
      "example": "public class LoginViewModel : INotifyPropertyChanged { public string Username { get; set; } }"
    },
    {
      "id": 9,
      "question": "How do you set a View’s DataContext?",
      "answer": "You can set it in XAML or code-behind to bind it to a ViewModel.",
      "example": "// In code-behind\nthis.DataContext = new MainViewModel();"
    },
    {
      "id": 10,
      "question": "What is a ValueConverter in WPF?",
      "answer": "A class that converts values between ViewModel and View, usually for formatting.",
      "example": "public class BoolToVisibilityConverter : IValueConverter { /* Convert true/false to Visible/Collapsed */ }"
    },
    {
      "id": 11,
      "question": "What’s the difference between OneWay and TwoWay binding?",
      "answer": "`OneWay` updates View from ViewModel. `TwoWay` syncs both ways.",
      "example": "<TextBox Text=\"{Binding Name, Mode=TwoWay}\" />"
    },
    {
      "id": 12,
      "question": "How do you bind a ListView to a collection?",
      "answer": "Bind `ItemsSource` to an ObservableCollection in your ViewModel.",
      "example": "<ListView ItemsSource=\"{Binding Products}\" />"
    },
    {
      "id": 13,
      "question": "What is ObservableCollection?",
      "answer": "A collection that automatically notifies the UI of add/remove changes.",
      "example": "public ObservableCollection<string> Names { get; set; } = new();"
    },
    {
      "id": 14,
      "question": "What is a ResourceDictionary?",
      "answer": "A centralized place to define reusable styles, brushes, etc.",
      "example": "<ResourceDictionary><Style TargetType=\"Button\">...</Style></ResourceDictionary>"
    },
    {
      "id": 15,
      "question": "What is a DataTemplate?",
      "answer": "Defines how to display bound data using XAML layout.",
      "example": "<DataTemplate><TextBlock Text=\"{Binding Name}\" /></DataTemplate>"
    },
    {
      "id": 16,
      "question": "What is the purpose of ICommand?",
      "answer": "It’s used in MVVM to encapsulate actions triggered by the UI.",
      "example": "public interface ICommand { void Execute(); bool CanExecute(); }"
    },
    {
      "id": 17,
      "question": "How do you navigate between Views in MVVM?",
      "answer": "Use a NavigationService or a ViewModel-based navigation system.",
      "example": "// Set a CurrentViewModel property and bind ContentControl to it"
    },
    {
      "id": 18,
      "question": "What is the role of the Model in MVVM?",
      "answer": "Model holds business/data logic and entities – no UI concerns.",
      "example": "public class Product { public string Name { get; set; } }"
    },
    {
      "id": 19,
      "question": "What are attached properties?",
      "answer": "Properties attached to elements from other classes – commonly used in styles.",
      "example": "Grid.Row=\"1\" // Grid.Row is an attached property"
    },
    {
      "id": 20,
      "question": "What is the difference between UserControl and Window?",
      "answer": "`UserControl` is reusable within another UI. `Window` is a top-level UI container.",
      "example": "<UserControl x:Class=\"MyApp.Views.LoginView\" />"
    },
    {
      "id": 21,
      "question": "How do you handle async operations in MVVM?",
      "answer": "Use `async` commands and `async/await` in the ViewModel without blocking UI.",
      "example": "public async Task LoadAsync() { await _service.Load(); }"
    },
    {
      "id": 22,
      "question": "What is the Visual Tree in WPF?",
      "answer": "The hierarchy of UI elements rendered by WPF – useful for styling/traversing elements.",
      "example": "// Used in templates, animations, etc."
    },
    {
      "id": 23,
      "question": "How do you apply styles globally?",
      "answer": "Put styles in `App.xaml` inside `Application.Resources`.",
      "example": "<Application.Resources><Style TargetType=\"Button\">...</Style></Application.Resources>"
    },
    {
      "id": 24,
      "question": "How does binding to nested properties work?",
      "answer": "Use dot notation in your binding path.",
      "example": "<TextBox Text=\"{Binding User.Address.Street}\" />"
    },
    {
      "id": 25,
      "question": "What is commanding in MVVM?",
      "answer": "It's the pattern where UI interactions (like button clicks) invoke ViewModel logic via ICommand.",
      "example": "<Button Command=\"{Binding DeleteCommand}\" />"
    },
    {
      "id": 26,
      "question": "How do you test ViewModels?",
      "answer": "Mock services and test public properties and commands directly (no UI needed).",
      "example": "[Fact] public void ShouldChangeState_WhenSaveCalled() { }"
    },
    {
      "id": 27,
      "question": "What’s a good way to manage multiple views?",
      "answer": "Use a NavigationStore or a Shell ViewModel with a `CurrentViewModel` property.",
      "example": "// ContentControl Content=\"{Binding CurrentViewModel}\""
    },
    {
      "id": 28,
      "question": "What is a ControlTemplate?",
      "answer": "Defines how a control is rendered visually, not just data-wise.",
      "example": "<ControlTemplate TargetType=\"Button\">...</ControlTemplate>"
    },
    {
      "id": 29,
      "question": "Can WPF support MVVM without any frameworks?",
      "answer": "Yes. You can fully implement MVVM using just .NET and your own INotifyPropertyChanged/RelayCommand.",
      "example": "// No Prism/MVVM Light – just clean manual MVVM"
    },
    {
      "id": 30,
      "question": "What are some common MVVM anti-patterns?",
      "answer": "- Using code-behind for logic\n- Overusing static references\n- Having ViewModel depend on View",
      "example": "// ❌ this.Close() in ViewModel – violates MVVM\n// ✅ use an event or interface to close view"
    }
  ]
}
